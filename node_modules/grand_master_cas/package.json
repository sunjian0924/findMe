{
  "name": "grand_master_cas",
  "version": "0.2.3",
  "scripts": {
    "test": "mocha -r should -R spec"
  },
  "dependencies": {
    "express": "~3.0.0rc2"
  },
  "devDependencies": {
    "mocha": "~1.3.2",
    "should": "~1.1.0",
    "sinon": "~1.4.2"
  },
  "description": "Simple, easy to use CAS authentication library for Node.JS.",
  "repository": {
    "type": "git",
    "url": "git@github.com:xaq2892/grand_master_cas.git"
  },
  "keywords": [
    "CAS",
    "login",
    "authentication",
    "yale"
  ],
  "author": {
    "name": "Zack Reneau-Wedeen",
    "url": "zackrw.com"
  },
  "license": "MIT",
  "readme": "##Grand Master CAS\nGrand Master CAS is a lightweight, easy library for [CAS authentication](http://www.jasig.org/cas/protocol)\n\nRight now, parts of Grand Master CAS depends on [express](http://expressjs.com/), but hopefully soon it will play nicely with any node program.\n\n####Installation\n    npm install grand_master_cas\n\n####There are only three steps needed to get it going\n######1. require it\n    var cas = require('grand_master_cas'); // cas is an object here, not a constructor\n                                           // because I return new GrandMasterCas in the module.\n######2. configure it\n    cas.configure({\n      casHost: \"secure.its.yale.edu\",   // required\n      casPath: \"/cas\",                  // your cas login route (defaults to \"/cas\")\n      ssl: true,                        // is the cas url https? defaults to false\n      port: 443,                        // defaults to 80 if ssl false, 443 if ssl true\n      service: \"http://localhost:3000\", // your site\n      sessionName: \"cas_user\",          // the cas user_name will be at req.session.cas_user (this is the default)\n      renew: false,                     // true or false, false is the default\n      gateway: false,                   // true or false, false is the default\n      redirectUrl: '/splash'            // the route that cas.blocker will send to if not authed. Defaults to '/'\n    });\n######3. throw it in your routes\n     app.get('/splash', routes.splash);\n     // grand_master_cas provides a logout\n     app.get('/logout', cas.logout);\n     // cas.bouncer prompts for authentication and performs login if not logged in. If logged in it passes on.\n     app.get('/login', cas.bouncer, routes.login);\n     // cas.blocker redirects to the redirectUrl supplied above if not logged in.\n     app.get('/', cas.blocker, routes.index);\n\nFor an example express app which uses Yale University's CAS login, check out /examples/yale_cas_express.\n    `npm install`\n    `node server`\nOpen your browser to localhost:3000 and you'll see a prompt to log in via Yale CAS. If you have a net id, you should be able to explore full functionality.\n\n*Once the user is logged in, Grand Master CAS sets req.session.cas_user (or your sessionName configuration option) equal to the user's username supplied by cas.*\n\n####Tests\nGrand Master CAS is pretty well tested.\nIn the root dir, run `npm test` or `make test` to run all tests.\nRun `make coverage` to run the coverage tests. or just open coverage.html from the git repo in your browser to see the results of the latest coverage test.\n\nGrand Master CAS is written by [Zack Reneau-Wedeen](http://zackrw.com)\n",
  "_id": "grand_master_cas@0.2.3",
  "dist": {
    "shasum": "b6ff41dda612ce9916414effebeebb023dbf763d",
    "tarball": "http://registry.npmjs.org/grand_master_cas/-/grand_master_cas-0.2.3.tgz"
  },
  "maintainers": [
    {
      "name": "zackrw",
      "email": "z.reneau.wedeen@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "b6ff41dda612ce9916414effebeebb023dbf763d",
  "_from": "grand_master_cas@^0.2.3",
  "_resolved": "https://registry.npmjs.org/grand_master_cas/-/grand_master_cas-0.2.3.tgz",
  "bugs": {
    "url": "https://github.com/xaq2892/grand_master_cas/issues"
  },
  "homepage": "https://github.com/xaq2892/grand_master_cas"
}
